var documenterSearchIndex = {"docs":
[{"location":"#AstroCoords","page":"Home","title":"AstroCoords","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for AstroCoords.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#AstroCoords.AbstractRepresentation","page":"Home","title":"AstroCoords.AbstractRepresentation","text":"AbstractRepresentation\n\nAbstract base type for all coordinate representations in astronomical coordinate systems. All concrete representations should inherit from this type either directly or through intermediate abstract types.\n\n\n\n\n\n","category":"type"},{"location":"#AstroCoords.Cartesian","page":"Home","title":"AstroCoords.Cartesian","text":"Cartesian{T} <: AbstractRepresentation\n\nCartesian coordinates (x, y, z).\n\nFields\n\nx::T: X-coordinate\ny::T: Y-coordinate \nz::T: Z-coordinate \n\nExamples\n\nc = Cartesian(1.0, 1.0, 1.0)  # Automatically normalized to unit length\n\n\n\n\n\n","category":"type"},{"location":"#AstroCoords.Coordinate","page":"Home","title":"AstroCoords.Coordinate","text":"Coordinate{F<:AbstractFrame, R<:AbstractRepresentation}\n\nA coordinate in a specific reference frame with a specific representation.\n\nThe Coordinate type is the fundamental building block of AstroCoords.jl. It combines a reference frame (like ICRS, Galactic, etc.) with a coordinate representation  (like spherical or Cartesian coordinates).\n\nType Parameters\n\nF: The reference frame type (subtype of AbstractFrame)\nR: The coordinate representation type (subtype of AbstractRepresentation)\n\nFields\n\nframe::F: The reference frame instance\nrepresentation::R: The coordinate representation instance\n\nExamples\n\njulia> using AstroCoords\n\njulia> # Create an ICRS coordinate with spherical representation\njulia> coord = Coordinate(ICRS(), SphericalD(deg2rad(45), deg2rad(30), 100.0))\n\njulia> # Access the frame and representation\njulia> coord.frame\nICRS()\n\njulia> coord.representation\nSphericalD{Float64, Float64}(0.5235987755982988, 0.7853981633974483, 100.0)\n\nPerformance Notes\n\nThe coordinate type is designed for maximum performance:\n\nType parameters enable compile-time optimizations\nField access is zero-cost\nFrame-specific accessors compile to direct field access\n\n\n\n\n\n","category":"type"},{"location":"#AstroCoords.Spherical","page":"Home","title":"AstroCoords.Spherical","text":"Spherical{T, D} <: AbstractRepresentation\n\nSpherical coordinates (latitude, longitude, distance).\n\nFields\n\nlongitude::T: Longitude angle\nlatitude::T: Latitude angle\ndistance::D: Distance from origin\n\nExamples\n\ns = Spherical(π/6, π/4)  # 30° longitude, 45° latitude\ns = Spherical(π/6, π/4, 1.0)  # 30° longitude, 45° latitude, distance 1.0\n\n\n\n\n\n","category":"type"},{"location":"#AstroCoords._dfs_segment!-Tuple{Type, Type, Symbol, Any, Any}","page":"Home","title":"AstroCoords._dfs_segment!","text":"_dfs_segment!(start, node, seg_kind, R_acc, Δ_acc)\n\nRecursively walk the graph:\n\nFuse current (seg_kind,R_acc,Δ_acc) with the edge (node→next).\nIf the edge kind is staticmatrix or staticaffine:   – continue fusing (update Racc, Δacc). Else (dynamic or callable):   – emit the completed segment as code;   – start a fresh segment on the barrier node.\nAt each node == destination, emit any remaining fused segment.\n\n\n\n\n\n","category":"method"},{"location":"#AstroCoords._maybe_emit-Tuple{Type, Type, Symbol, Any, Any}","page":"Home","title":"AstroCoords._maybe_emit","text":"_maybe_emit(src, dst, seg_kind, R, Δ)\n\nIf we haven't yet emitted a method for (src,dst), generate one  transform(vec, src, dst) that runs the fused segment.\n\nFor :static_matrix → return R * vec\nFor :static_affine → return R * vec .+ Δ\nOtherwise (dynamic/callable barrier) → use stored callable\n\n\n\n\n\n","category":"method"},{"location":"#AstroCoords.alt-Tuple{Coordinate{<:AltAz, <:Spherical}}","page":"Home","title":"AstroCoords.alt","text":"alt(c::Coordinate{<:AltAz, Spherical})\n\nExtract the altitude (elevation) from an AltAz coordinate.\n\nArguments\n\nc: Coordinate in AltAz frame with spherical representation\n\nReturns\n\nAltitude component (same type as coordinate representation)\n\n\n\n\n\n","category":"method"},{"location":"#AstroCoords.az-Tuple{Coordinate{<:AltAz, <:Spherical}}","page":"Home","title":"AstroCoords.az","text":"az(c::Coordinate{<:AltAz, Spherical})\n\nExtract the azimuth from an AltAz coordinate.\n\nArguments\n\nc: Coordinate in AltAz frame with spherical representation\n\nReturns\n\nAzimuth component (same type as coordinate representation)\n\n\n\n\n\n","category":"method"},{"location":"#AstroCoords.build_paths!-Tuple{}","page":"Home","title":"AstroCoords.build_paths!","text":"build_paths!()\n\nTraverse every registered atomic edge and emit fully-fused methods for all  reachable (Source,Target) pairs. Should be called once (e.g. in __init__).\n\n\n\n\n\n","category":"method"},{"location":"#AstroCoords.dec-Tuple{Coordinate{<:FK4, <:Spherical}}","page":"Home","title":"AstroCoords.dec","text":"dec(c::Coordinate{<:FK4, Spherical})\n\nExtract the declination from an FK4 coordinate.\n\nArguments\n\nc: Coordinate in FK4 frame with spherical representation\n\nReturns\n\nDeclination component (same type as coordinate representation)\n\n\n\n\n\n","category":"method"},{"location":"#AstroCoords.dec-Tuple{Coordinate{<:FK4NoETerms, <:Spherical}}","page":"Home","title":"AstroCoords.dec","text":"dec(c::Coordinate{<:FK4NoETerms, Spherical})\n\nExtract the declination from an FK4NoETerms coordinate.\n\nArguments\n\nc: Coordinate in FK4NoETerms frame with spherical representation\n\nReturns\n\nDeclination component (same type as coordinate representation)\n\n\n\n\n\n","category":"method"},{"location":"#AstroCoords.dec-Tuple{Coordinate{<:FK5, <:Spherical}}","page":"Home","title":"AstroCoords.dec","text":"dec(c::Coordinate{<:FK5, Spherical})\n\nExtract the declination from an FK5 coordinate.\n\nArguments\n\nc: Coordinate in FK5 frame with spherical representation\n\nReturns\n\nDeclination component (same type as coordinate representation)\n\n\n\n\n\n","category":"method"},{"location":"#AstroCoords.dec-Tuple{Coordinate{<:HADec, <:Spherical}}","page":"Home","title":"AstroCoords.dec","text":"dec(c::Coordinate{<:HADec, Spherical})\n\nExtract the declination from a HADec coordinate.\n\nArguments\n\nc: Coordinate in HADec frame with spherical representation\n\nReturns\n\nDeclination component (same type as coordinate representation)\n\n\n\n\n\n","category":"method"},{"location":"#AstroCoords.dec-Tuple{Coordinate{<:ICRS, <:Spherical}}","page":"Home","title":"AstroCoords.dec","text":"dec(c::Coordinate{ICRS, Spherical})\n\nExtract the declination from an ICRS coordinate.\n\nArguments\n\nc: Coordinate in ICRS frame with spherical representation\n\nReturns\n\nDeclination component (same type as coordinate representation)\n\n\n\n\n\n","category":"method"},{"location":"#AstroCoords.dist-Tuple{Coordinate}","page":"Home","title":"AstroCoords.dist","text":"dist(coordinate::Coordinate{AbstractFrame, AbstractRepresentation})\n\nExtract the distance component from a coordinate with spherical representation that includes distance.\n\nArguments\n\ncoordinate: Coordinate with AbstractRepresentation representation\n\nReturns\n\nDistance component from the underlying representation\n\n\n\n\n\n","category":"method"},{"location":"#AstroCoords.eclat-Tuple{Coordinate{<:Ecliptic, <:Spherical}}","page":"Home","title":"AstroCoords.eclat","text":"eclat(c::Coordinate{<:Ecliptic, Spherical})\n\nExtract the ecliptic latitude from an Ecliptic coordinate (ASCII alternative to β).\n\nArguments\n\nc: Coordinate in Ecliptic frame with spherical representation\n\nReturns\n\nEcliptic latitude component (same type as coordinate representation)\n\n\n\n\n\n","category":"method"},{"location":"#AstroCoords.eclon-Tuple{Coordinate{<:Ecliptic, <:Spherical}}","page":"Home","title":"AstroCoords.eclon","text":"eclon(c::Coordinate{<:Ecliptic, Spherical})\n\nExtract the ecliptic longitude from an Ecliptic coordinate (ASCII alternative to λ).\n\nArguments\n\nc: Coordinate in Ecliptic frame with spherical representation\n\nReturns\n\nEcliptic longitude component (same type as coordinate representation)\n\n\n\n\n\n","category":"method"},{"location":"#AstroCoords.gab-Tuple{Coordinate{<:Galactic, <:Spherical}}","page":"Home","title":"AstroCoords.gab","text":"gab(c::Coordinate{Galactic, Spherical})\n\nExtract the galactic latitude from a Galactic coordinate.\n\nArguments\n\nc: Coordinate in Galactic frame with spherical representation\n\nReturns\n\nGalactic latitude component (same type as coordinate representation)\n\n\n\n\n\n","category":"method"},{"location":"#AstroCoords.gal-Tuple{Coordinate{<:Galactic, <:Spherical}}","page":"Home","title":"AstroCoords.gal","text":"gal(c::Coordinate{Galactic, Spherical})\n\nExtract the galactic longitude from a Galactic coordinate.\n\nArguments\n\nc: Coordinate in Galactic frame with spherical representation\n\nReturns\n\nGalactic longitude component (same type as coordinate representation)\n\n\n\n\n\n","category":"method"},{"location":"#AstroCoords.ha-Tuple{Coordinate{<:HADec, <:Spherical}}","page":"Home","title":"AstroCoords.ha","text":"ha(c::Coordinate{<:HADec, Spherical})\n\nExtract the hour angle from a HADec coordinate.\n\nArguments\n\nc: Coordinate in HADec frame with spherical representation\n\nReturns\n\nHour angle component (same type as coordinate representation)\n\n\n\n\n\n","category":"method"},{"location":"#AstroCoords.lat-Tuple{Coordinate{<:AbstractFrame, <:Spherical}}","page":"Home","title":"AstroCoords.lat","text":"lat(coordinate::Coordinate{AbstractFrame, Spherical})\n\nExtract the latitude component from a coordinate with spherical representation.\n\nArguments\n\ncoordinate: Coordinate with spherical representation\n\nReturns\n\nLatitude component from the underlying representation\n\n\n\n\n\n","category":"method"},{"location":"#AstroCoords.lat-Tuple{Spherical}","page":"Home","title":"AstroCoords.lat","text":"lat(representation::Spherical)\n\nGet the latitude component of a spherical representation.\n\n\n\n\n\n","category":"method"},{"location":"#AstroCoords.lon-Tuple{Coordinate{<:AbstractFrame, <:Spherical}}","page":"Home","title":"AstroCoords.lon","text":"lon(coordinate::Coordinate{AbstractFrame, Spherical})\n\nExtract the longitude component from a coordinate with spherical representation.\n\nArguments\n\ncoordinate: Coordinate with spherical representation\n\nReturns\n\nLongitude component from the underlying representation\n\n\n\n\n\n","category":"method"},{"location":"#AstroCoords.lon-Tuple{Spherical}","page":"Home","title":"AstroCoords.lon","text":"lon(representation::Spherical)\n\nGet the longitude component of a spherical representation.\n\n\n\n\n\n","category":"method"},{"location":"#AstroCoords.ra-Tuple{Coordinate{<:FK4, <:Spherical}}","page":"Home","title":"AstroCoords.ra","text":"ra(c::Coordinate{<:FK4, Spherical})\n\nExtract the right ascension from an FK4 coordinate.\n\nArguments\n\nc: Coordinate in FK4 frame with spherical representation\n\nReturns\n\nRight ascension component (same type as coordinate representation)\n\n\n\n\n\n","category":"method"},{"location":"#AstroCoords.ra-Tuple{Coordinate{<:FK4NoETerms, <:Spherical}}","page":"Home","title":"AstroCoords.ra","text":"ra(c::Coordinate{<:FK4NoETerms, Spherical})\n\nExtract the right ascension from an FK4NoETerms coordinate.\n\nArguments\n\nc: Coordinate in FK4NoETerms frame with spherical representation\n\nReturns\n\nRight ascension component (same type as coordinate representation)\n\n\n\n\n\n","category":"method"},{"location":"#AstroCoords.ra-Tuple{Coordinate{<:FK5, <:Spherical}}","page":"Home","title":"AstroCoords.ra","text":"ra(c::Coordinate{<:FK5, Spherical})\n\nExtract the right ascension from an FK5 coordinate.\n\nArguments\n\nc: Coordinate in FK5 frame with spherical representation\n\nReturns\n\nRight ascension component (same type as coordinate representation)\n\n\n\n\n\n","category":"method"},{"location":"#AstroCoords.ra-Tuple{Coordinate{<:ICRS, <:Spherical}}","page":"Home","title":"AstroCoords.ra","text":"ra(c::Coordinate{F, R}) where {F::ICRS,R::Spherical}\n\nExtract the right ascension from an ICRS coordinate.\n\nArguments\n\nc: Coordinate in ICRS frame with spherical representation\n\nReturns\n\nRight ascension component (same type as coordinate representation)\n\nExamples\n\njulia> coord = Coordinate(ICRS(), SphericalD(deg2rad(30), deg2rad(45), 1.0))\njulia> ra(coord)\n0.5235987755982988\n\n\n\n\n\n","category":"method"},{"location":"#AstroCoords.sgb-Tuple{Coordinate{<:Supergalactic, <:Spherical}}","page":"Home","title":"AstroCoords.sgb","text":"sgb(c::Coordinate{Supergalactic, Spherical})\n\nExtract the supergalactic latitude from a Supergalactic coordinate.\n\nArguments\n\nc: Coordinate in Supergalactic frame with spherical representation\n\nReturns\n\nSupergalactic latitude component (same type as coordinate representation)\n\n\n\n\n\n","category":"method"},{"location":"#AstroCoords.sgl-Tuple{Coordinate{<:Supergalactic, <:Spherical}}","page":"Home","title":"AstroCoords.sgl","text":"sgl(c::Coordinate{Supergalactic, Spherical})\n\nExtract the supergalactic longitude from a Supergalactic coordinate.\n\nArguments\n\nc: Coordinate in Supergalactic frame with spherical representation\n\nReturns\n\nSupergalactic longitude component (same type as coordinate representation)\n\n\n\n\n\n","category":"method"},{"location":"#AstroCoords.transform-Union{Tuple{T}, Tuple{R}, Tuple{F}, Tuple{Coordinate{F, R}, T}} where {F<:AbstractFrame, R<:AbstractRepresentation, T<:AbstractFrame}","page":"Home","title":"AstroCoords.transform","text":"transform(c::Coordinate, target::AbstractFrame) -> Coordinate\n\nTransform a coordinate from its current frame to a target frame.\n\nThis high-level interface handles representation conversions automatically:\n\nConverts any representation to Cartesian\nCalls the low-level transform\nWraps the result back into a Coordinate\n\nExamples\n\njulia> using AstroCoords\n\njulia> # Create a coordinate in ICRS\njulia> coord = Coordinate(ICRS(), SphericalD(deg2rad(45), deg2rad(30), 100.0))\n\njulia> # Transform to Galactic frame\njulia> gal_coord = transform(coord, Galactic())\n\njulia> gal_coord.frame\nGalactic()\n\n\n\n\n\n","category":"method"},{"location":"#AstroCoords.update_paths!-Tuple{Type, Type, Symbol}","page":"Home","title":"AstroCoords.update_paths!","text":"update_paths!(new_src, new_dst, new_kind)\n\nWhen a new atomic edge is added after the one-shot build, re-explore affected  paths. This is a simplified version that just re-runs DFS from the new edge.\n\n\n\n\n\n","category":"method"},{"location":"#AstroCoords.x_coord-Tuple{Cartesian}","page":"Home","title":"AstroCoords.x_coord","text":"x_coord(representation::Cartesian)\n\nGet the x-coordinate component of a cartesian representation.\n\n\n\n\n\n","category":"method"},{"location":"#AstroCoords.x_coord-Tuple{Coordinate{<:AbstractFrame, <:Cartesian}}","page":"Home","title":"AstroCoords.x_coord","text":"x_coord(coordinate::Coordinate{AbstractFrame, Cartesian})\n\nExtract the x-coordinate component from a coordinate with Cartesian representation.\n\nArguments\n\ncoordinate: Coordinate with Cartesian representation\n\nReturns\n\nX-component from the underlying representation\n\n\n\n\n\n","category":"method"},{"location":"#AstroCoords.y_coord-Tuple{Cartesian}","page":"Home","title":"AstroCoords.y_coord","text":"y_coord(representation::Cartesian)\n\nGet the y-coordinate component of a cartesian representation.\n\n\n\n\n\n","category":"method"},{"location":"#AstroCoords.y_coord-Tuple{Coordinate{<:AbstractFrame, <:Cartesian}}","page":"Home","title":"AstroCoords.y_coord","text":"y_coord(coordinate::Coordinate{AbstractFrame, Cartesian})\n\nExtract the y-coordinate component from a coordinate with Cartesian representation.\n\nArguments\n\ncoordinate: Coordinate with Cartesian representation\n\nReturns\n\nY-component from the underlying representation\n\n\n\n\n\n","category":"method"},{"location":"#AstroCoords.z_coord-Tuple{Cartesian}","page":"Home","title":"AstroCoords.z_coord","text":"z_coord(representation::Cartesian)\n\nGet the z-coordinate component of a cartesian representation.\n\n\n\n\n\n","category":"method"},{"location":"#AstroCoords.z_coord-Tuple{Coordinate{<:AbstractFrame, <:Cartesian}}","page":"Home","title":"AstroCoords.z_coord","text":"z_coord(coordinate::Coordinate{AbstractFrame, Cartesian})\n\nExtract the z-coordinate component from a coordinate with Cartesian representation.\n\nArguments\n\ncoordinate: Coordinate with Cartesian representation\n\nReturns\n\nZ-component from the underlying representation\n\n\n\n\n\n","category":"method"},{"location":"#AstroCoords.β-Tuple{Coordinate{<:Ecliptic, <:Spherical}}","page":"Home","title":"AstroCoords.β","text":"β(c::Coordinate{<:Ecliptic, Spherical})\n\nExtract the ecliptic latitude (beta) from an Ecliptic coordinate.\n\nArguments\n\nc: Coordinate in Ecliptic frame with spherical representation\n\nReturns\n\nEcliptic latitude component (same type as coordinate representation)\n\n\n\n\n\n","category":"method"},{"location":"#AstroCoords.λ-Tuple{Coordinate{<:Ecliptic, <:Spherical}}","page":"Home","title":"AstroCoords.λ","text":"λ(c::Coordinate{<:Ecliptic, Spherical})\n\nExtract the ecliptic longitude (lambda) from an Ecliptic coordinate.\n\nArguments\n\nc: Coordinate in Ecliptic frame with spherical representation\n\nReturns\n\nEcliptic longitude component (same type as coordinate representation)\n\n\n\n\n\n","category":"method"},{"location":"#Base.getproperty-Tuple{Coordinate, Symbol}","page":"Home","title":"Base.getproperty","text":"Base.getproperty(c::Coordinate, s::Symbol)\n\nProvide property-style access to coordinate components and frame-specific accessors.\n\nThis method enables both generic coordinate access (.lon, .lat, .dist, .x, .y, .z) and frame-specific access (.ra, .dec, .alt, .az, etc.) through Julia's property syntax.\n\nPerformance is optimized using constant folding with simple if-else chains rather than dictionaries or other dynamic dispatch mechanisms.\n\nArguments\n\nc: Coordinate object\ns: Property symbol to access\n\nReturns\n\nRequested coordinate component\n\nSupported Properties\n\nCore Properties\n\n:frame: The coordinate frame\n:representation: The coordinate representation\n\nGeneric Coordinate Properties\n\n:lon, :lat, :dist: Spherical coordinates\n:x, :y, :z: Cartesian coordinates (aliases for xcoord, ycoord, z_coord)\n:x_coord, :y_coord, :z_coord: Cartesian coordinates\n\nFrame-Specific Properties\n\n:ra, :dec: Right ascension, declination (ICRS, FK4, FK5, FK4NoETerms, HADec)\n:alt, :az: Altitude, azimuth (AltAz)\n:ha: Hour angle (HADec)\n:λ, :β: Ecliptic longitude, latitude (Ecliptic, Unicode)\n:eclon, :eclat: Ecliptic longitude, latitude (Ecliptic, ASCII)\n:sgl, :sgb: Supergalactic longitude, latitude (Supergalactic)\n\nExamples\n\njulia> coord = Coordinate(ICRS(), SphericalD(deg2rad(30), deg2rad(45), 1.0))\njulia> coord.ra     # Right ascension\njulia> coord.dec    # Declination\njulia> coord.lon    # Generic longitude\njulia> coord.lat    # Generic latitude\n\nThrows\n\nArgumentError: If the requested property is not available for this coordinate\n\n\n\n\n\n","category":"method"},{"location":"#AstroCoords.@transformation-Tuple","page":"Home","title":"AstroCoords.@transformation","text":"@transformation KIND [priority=1.0] Source => Target begin\n    …kernel code…\nend\n\nKIND can be:   :staticmatrix   – returns a 3×3 SMatrix   :staticaffine   – returns (R::SMatrix, Δ::SVector)   :dynamicmatrix  – returns (srcframe,dstframe)->SMatrix   :dynamicaffine  – returns (srcframe,dstframe)->(SMatrix,SVector)   :callable        – returns (vec,srcframe,dstframe)->new_vec\n\n\n\n\n\n","category":"macro"}]
}
